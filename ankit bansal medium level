-----problem 1
-where we need to find player with no of gold medals won by them only for players who won only gold medals
--script:
CREATE TABLE events (
ID int,
event varchar(255),
YEAR INt,
GOLD varchar(255),
SILVER varchar(255),
BRONZE varchar(255));

INSERT INTO events VALUES (1,'100m',2016, 'Amthhew Mcgarray','donald','barbara');
INSERT INTO events VALUES (2,'200m',2016, 'Nichole','Alvaro Eaton','janet Smith');
INSERT INTO events VALUES (3,'500m',2016, 'Charles','Nichole','Susana');
INSERT INTO events VALUES (4,'100m',2016, 'Ronald','maria','paula');
INSERT INTO events VALUES (5,'200m',2016, 'Alfred','carol','Steven');
INSERT INTO events VALUES (6,'500m',2016, 'Nichole','Alfred','Brandon');
INSERT INTO events VALUES (7,'100m',2016, 'Charles','Dennis','Susana');
INSERT INTO events VALUES (8,'200m',2016, 'Thomas','Dawn','catherine');
INSERT INTO events VALUES (9,'500m',2016, 'Thomas','Dennis','paula');
INSERT INTO events VALUES (10,'100m',2016, 'Charles','Dennis','Susana');
INSERT INTO events VALUES (11,'200m',2016, 'jessica','Donald','Stefeney');
INSERT INTO events VALUES (12,'500m',2016,'Thomas','Steven','Catherine');

select * from events;
select 
gold as player_name,
count(1) as cnt 
from events
where gold not in (select silver from events union all select bronze from events)
group by gold;

--2 nd approach----
with cte as (
select gold,'gold' as medal_type from events
union all select silver,'silver'as medal_type from events
union all select bronze,'bronze'as medal_type from events)
select gold,count(1) as no_of_medals
from cte 
group by gold having count(distinct medal_type)= 1 and max(medal_type) ='gold'

--------------------------------------------------------------------------------------------

---2 question ---
--script:problem where we need to find number of employees inside the hospital.
create table hospital ( emp_id int
, action varchar(10)
, time Timestamp);
delete from hospital;
insert into hospital values ('1', 'in', '2019-12-22 09:00:00');
insert into hospital values ('1', 'out', '2019-12-22 09:15:00');
insert into hospital values ('2', 'in', '2019-12-22 09:00:00');
insert into hospital values ('2', 'out', '2019-12-22 09:15:00');
insert into hospital values ('2', 'in', '2019-12-22 09:30:00');
insert into hospital values ('3', 'out', '2019-12-22 09:00:00');
insert into hospital values ('3', 'in', '2019-12-22 09:15:00');
insert into hospital values ('3', 'out', '2019-12-22 09:30:00');
insert into hospital values ('3', 'in', '2019-12-22 09:45:00');
insert into hospital values ('4', 'in', '2019-12-22 09:45:00');
insert into hospital values ('5', 'out', '2019-12-22 09:40:00');

select * from hospital;

with cte as (
select 
emp_id,
max(case when action ='in' then Time end) as intime,
max(case when action ='out' then Time end) as outtime
from hospital
group by emp_id)
select *
from cte 
where intime > outtime or outtime is null;

-----------------------------------------------------------------------------------------------

----question 3 
--find the room types that are searched most no of times.output the room type alongside the number of searches for it. 
--If the filter for room types has more than one room type,consider each unique roo type as a separate row. 
--Sort the result based on th number of searches in desc order.

create table airbnb_searches 
(
user_id int,
date_searched date,
filter_room_types varchar(200)
);
delete from airbnb_searches;
insert into airbnb_searches values
(1,'2022-01-01','entire home,private room')
,(2,'2022-01-02','entire home,shared room')
,(3,'2022-01-02','private room,shared room')
,(4,'2022-01-03','private room')
;

select * from airbnb_searches;
SELECT 
  TRIM(room_type) AS room_type,
  COUNT(*) AS no_of_searches
FROM (
  SELECT 
    unnest(string_to_array(filter_room_types, ',')) AS room_type
  FROM airbnb_searches
) AS normalized
GROUP BY TRIM(room_type)
ORDER BY no_of_searches DESC;

---------------------------------------------------------------------------------------------------------

----4 question---
--script:write a sql to return all employee whose salary is same in same department
CREATE TABLE emp_salary (
    emp_id INTEGER NOT NULL,
    name VARCHAR(20) NOT NULL,
    salary NUMERIC(10, 2),
    dept_id INTEGER
);

INSERT INTO emp_salary (emp_id, name, salary, dept_id)
VALUES
(101, 'sohan', 3000, 11),
(102, 'rohan', 4000, 12),
(103, 'mohan', 5000, 13),
(104, 'cat', 3000, 11),
(105, 'suresh', 4000, 12),
(109, 'mahesh', 7000, 12),
(108, 'kamal', 8000, 11);

select * from emp_salary;
WITH cte AS (
    SELECT 
        dept_id,
        salary
    FROM emp_salary 
    GROUP BY dept_id, salary
    HAVING COUNT(*) > 1
)
SELECT e1.* 
FROM emp_salary e1
INNER JOIN cte e2 
  ON e1.dept_id = e2.dept_id;

-------------------------------------------------------------------------------------------------

---question 5 
--write a query to obtain the number of users who purchased the same product of two or more different days. Output the number of unique users

create table purchases(
	user_id int,
	product_id int,
	quantity int,
	purchase_date Timestamp
);

insert into purchases values(536, 3223, 6, '01/11/2022 12:33:44');
insert into purchases values(827, 3585, 35, '02/20/2022 14:05:26');
insert into purchases values(536, 3223, 5, '03/02/2022 09:33:28');
insert into purchases values(536, 1435, 10, '03/02/2022 08:40:00');
insert into purchases values(827, 2452, 45, '04/09/2022 00:00:00');

select * from purchases;
select count(1) as users_num from (
select 
user_id,
product_id,
count(distinct purchase_date::date) as purchase_date
from purchases
group by 1, 2
having count(purchase_date::date) >1)a;

------------------------------------------------------------------------------------------------

---question 6 
--write a query to print highest and lowest salary emp in each depatment 
drop table employee;

create table employee 
(
emp_name varchar(10),
dep_id int,
salary int
);

insert into employee values 
('Siva',1,30000),('Ravi',2,40000),('Prasad',1,50000),('Sai',2,20000);

select * from employee;
with cte as (
select
dep_id,
max(salary) as max_salary,
min(salary) as min_salary
from employee
group by 1)
select
e.dep_id,
max(case when salary = max_salary then emp_name else null end) as max_sal_emp,
max(case when salary = min_salary then emp_name else null end) as min_sal_emp
from employee e
inner join cte c on e.dep_id = c.dep_id
group by 1;


---2nd approach---
SELECT
    dep_id,
    MAX(CASE WHEN rn_max = 1 THEN emp_name END) AS max_sal_emp,
    MAX(CASE WHEN rn_min = 1 THEN emp_name END) AS min_sal_emp
FROM (
    SELECT *,
        RANK() OVER (PARTITION BY dep_id ORDER BY salary DESC) AS rn_max,
        RANK() OVER (PARTITION BY dep_id ORDER BY salary ASC) AS rn_min
    FROM employee
) t
GROUP BY dep_id;

-----------------------------------------------------------------------------
--7 questions
--script:
create table call_start_logs
(
phone_number varchar(10),
start_time timestamp);

insert into call_start_logs values
('PN1','2022-01-01 10:20:00'),('PN1','2022-01-01 16:25:00'),('PN2','2022-01-01 12:30:00')
,('PN3','2022-01-02 10:00:00'),('PN3','2022-01-02 12:30:00'),('PN3','2022-01-03 09:20:00');

create table call_end_logs(
phone_number varchar(10),
end_time timestamp);

insert into call_end_logs values
('PN1','2022-01-01 10:45:00'),('PN1','2022-01-01 17:05:00'),('PN2','2022-01-01 12:55:00')
,('PN3','2022-01-02 10:20:00'),('PN3','2022-01-02 12:50:00'),('PN3','2022-01-03 09:40:00');


select * from call_start_logs;
select * from  call_end_logs;

select a.phone_number,a.start_time,b.end_time, AGE(end_time, start_time) AS time_diff, DATE_PART('minute', AGE(end_time, start_time)) AS minutes_diff
from
(select *, row_number() over (partition by phone_number order by start_time) as rnk_start_time from call_start_logs)a
inner join 
(select *, row_number() over (partition by phone_number order by end_time) as rnk_end_time from call_end_logs)b
on a.phone_number = b.phone_number and a.rnk_start_time= b.rnk_end_time;

---we can use both Last 2 column for minutes--

----------------------------------------------------------------------------------------------
